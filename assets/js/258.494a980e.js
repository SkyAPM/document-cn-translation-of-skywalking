(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{487:function(t,e,r){"use strict";r.r(e);var s=r(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("p",[t._v("在大多数情况下，端点应该通过语言代理、服务网格可观察性解决方案或仪表系统的配置自动检测。\n有一些特殊的情况，特别是当人们使用REST样式的URI时，应用程序代码将参数放在端点名称中，例如将订单id放在URI中，如/prod/ORDER123和/prod/ORDER123。\n但从逻辑上讲，人们希望他们可以有一个端点名，如prod/{order-id}。这是为端点分组参数化而设计的特性。\n目前，用户可以通过静态YAML文件中的 endpoint_name_grouping 来设置分组规则。或使用"),r("router-link",{attrs:{to:"./dynamic-config.html"}},[t._v("动态配置")]),t._v("初始化和更新端点分组规则。")],1),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("无论是静态本地文件还是动态配置值，它们都共享相同的YAML格式。\ngrouping:")]),t._v(" "),t._m(2),t._v(" "),t._m(3)])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"端点分组参数化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#端点分组参数化"}},[this._v("#")]),this._v(" 端点分组参数化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"配置格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置格式"}},[this._v("#")]),this._v(" 配置格式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"服务端点将遵循以下规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务端点将遵循以下规则"}},[this._v("#")]),this._v(" 服务端点将遵循以下规则")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("service-name: serviceA\nrules:\n"),e("h1",{attrs:{id:"通过正则表达式匹配时的逻辑名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过正则表达式匹配时的逻辑名称"}},[this._v("#")]),this._v(" 通过正则表达式匹配时的逻辑名称")]),this._v(" "),e("ul",[e("li",[this._v("endpoint-name: /prod/{id}\nregex: /prod/.+")])])])])}],!1,null,null,null);e.default=n.exports}}]);