(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{272:function(t,e,n){"use strict";n.r(e);var i=n(0),r=Object(i.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("在流模式(Streaming mode)下, SkyWalking 提供了 OAL 来分析流入的数据.")]),t._v(" "),n("p",[t._v("OAL 聚焦于服务, 服务实例以及端点的度量指标, 因此 OAL 非常易于学习和使用.")]),t._v(" "),n("p",[t._v("考虑到性能, 可读性以及可调试性, OAL 被定义成一种编译语言.\nOAL 脚本会在打包阶段被编译为正常的 Java 代码.")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("阅读"),n("router-link",{attrs:{to:"./scope-definitions.html"}},[t._v("Scope Definitions")]),t._v("一文, 你可以在该文中找到所有域和字段.")],1),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("使用在使用过滤器的时候, 通过指定字段名或表达式来构建字段值的过滤条件.")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),n("p",[t._v("默认的聚合函数有 SkyWalking OAP 核心实现, 并可自由扩展更多函数.")]),t._v(" "),n("p",[t._v("提供的函数")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),n("p",[t._v("本例统计每个服务的调用数.")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("p99")]),t._v(", "),n("code",[t._v("p95")]),t._v(", "),n("code",[t._v("p90")]),t._v(", "),n("code",[t._v("p75")]),t._v(", "),n("code",[t._v("p50")]),t._v(". 参考"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Percentile",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wiki 上对 p99 的解释"),n("OutboundLink")],1)])]),t._v(" "),t._m(20),t._v(" "),n("p",[t._v("本例中统计所有接入请求的 p99 值.")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("thermodynamic")]),t._v(". 参考"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Heat_map",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wiki 上对 HeatMap 的解释"),n("OutboundLink")],1),t._v(")")])]),t._v(" "),t._m(21),t._v(" "),n("p",[t._v("本例中统计所有进入请求的热力学热点图.")]),t._v(" "),t._m(22),t._v(" "),n("p",[t._v("存储实现, 报警以及查询模块的度量指标名称. SkyWalking 内核支持自动类型推断.")]),t._v(" "),t._m(23),t._v(" "),n("p",[t._v("所有度量指标数据都会使用 Scope.ID 和最小时间桶(min-level time bucket) 进行分组.")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26)])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"观测分析语言-observability-analysis-language-oal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#观测分析语言-observability-analysis-language-oal"}},[this._v("#")]),this._v(" 观测分析语言(Observability Analysis Language, OAL)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[this._v("#")]),this._v(" 语法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("OAL 脚本文件应该以 "),e("code",[this._v(".oal")]),this._v(" 为后缀.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("METRIC_NAME = from(SCOPE.(* | [FIELD][,FIELD ...]))\n[.filter(FIELD OP [INT | STRING])]\n.FUNCTION([PARAM][, PARAM ...])\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"域-scope"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#域-scope"}},[this._v("#")]),this._v(" 域(Scope)")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("主要的**域(Scope)**包括 "),n("code",[t._v("All")]),t._v(", "),n("code",[t._v("Service")]),t._v(", "),n("code",[t._v("ServiceInstance")]),t._v(", "),n("code",[t._v("Endpoint")]),t._v(", "),n("code",[t._v("ServiceRelation")]),t._v(", ServiceInstanceRelation"),n("code",[t._v(",")]),t._v("EndpointRelation`.\n当然还有一些二级域, 他们都属于以上某个一级域.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"过滤器-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤器-filter"}},[this._v("#")]),this._v(" 过滤器(Filter)")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("表达式可以使用 "),n("code",[t._v("and")]),t._v(", "),n("code",[t._v("or")]),t._v(" 和 "),n("code",[t._v("()")]),t._v(" 进行组合.\n操作符包含 "),n("code",[t._v("=")]),t._v(", "),n("code",[t._v("!=")]),t._v(", "),n("code",[t._v(">")]),t._v(", "),n("code",[t._v("<")]),t._v(", "),n("code",[t._v("in (v1, v2, ...")]),t._v(", "),n("code",[t._v('like "%..."')]),t._v(", 他们可以基于字段类型进行类型检测,\n如果类型不兼容会在编译/代码生成期间报错.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"聚合函数-aggregation-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数-aggregation-function"}},[this._v("#")]),this._v(" 聚合函数(Aggregation Function)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("longAvg")]),this._v(". 某个域实体所有输入的平均值. 输入字段必须是 "),e("code",[this._v("long")]),this._v(" 类型.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("instance_jvm_memory_max = from(ServiceInstanceJVMMemory.max).longAvg();")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在这个例子中, 输入是 "),e("code",[this._v("ServiceInstanceJVMMemory")]),this._v(" 域的每个请求, 平均值是基于字段 "),e("code",[this._v("max")]),this._v(" 进行求值的.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("doubleAvg")]),this._v(". 某个域实体的所有输入的平均值. 输入的字段必须是 "),e("code",[this._v("double")]),this._v(" 类型.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("instance_jvm_cpu = from(ServiceInstanceJVMCPU.usePercent).doubleAvg();")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在这个例子中, 输入是 "),e("code",[this._v("ServiceInstanceJVMCPU")]),this._v(" 域的每个请求, 平均值是基于 "),e("code",[this._v("usePercent")]),this._v(" 字段进行求值的.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("percent")]),this._v(". 对于输入中匹配指定条件的百分比数.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("endpoint_percent = from(Endpoint.*).percent(status == true);")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在这个例子中, 输入是每个端点的请求, 条件是 "),e("code",[this._v("endpoint.status == true")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("sum")]),this._v(". 某个域实体的调用总数.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Service_Calls_Sum = from(Service.*).sum();")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("All_p99 = from(All.latency).p99(10);")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("All_heatmap = from(All.latency).thermodynamic(100, 20);")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"度量指标名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#度量指标名称"}},[this._v("#")]),this._v(" 度量指标名称")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"组-group"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组-group"}},[this._v("#")]),this._v(" 组(Group)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在端点(Endpoint)域中, Scope.ID = Endpoint 的 ID(基于服务及其端点的唯一标志).")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[this._v("#")]),this._v(" 示例")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// 计算 Endpoint1 和 Endpoint2 的 p99 值\nEndpoint_p99 = from(Endpoint.latency).filter(name in ("Endpoint1", "Endpoint2")).summary(0.99)\n\n// 计算端点名以 `serv` 开头的端点的 p99 值\nserv_Endpoint_p99 = from(Endpoint.latency).filter(name like ("serv%")).summary(0.99)\n\n// 计算每个端点的响应平均时长\nEndpoint_avg = from(Endpoint.latency).avg()\n\n// 计算每个端点的延迟柱状图, 每隔 50 毫秒一条柱\n// 在用户界面中, 匹配此度量指标的都会显示热力学图\nEndpoint_histogram = from(Endpoint.latency).histogram(50)\n\n// 统计每个服务响应状态为 true 的百分比\nEndpoint_success = from(Endpoint.*).filter(status = "true").percent()\n\n// 统计每个服务响应码在 [200, 299] 之间的百分比\nEndpoint_200 = from(Endpoint.*).filter(responseCode like "2%").percent()\n\n// 统计每个服务响应码在 [500, 599] 之间的百分比\nEndpoint_500 = from(Endpoint.*).filter(responseCode like "5%").percent()\n\n// 统计每个服务的调用总量\nEndpointCalls = from(Endpoint.*).sum()\n')])])])}],!1,null,null,null);e.default=r.exports}}]);