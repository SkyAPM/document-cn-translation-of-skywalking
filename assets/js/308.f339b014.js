(window.webpackJsonp=window.webpackJsonp||[]).push([[308],{337:function(e,t,n){"use strict";n.r(t);var s=n(0),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[e._v("在流模式(Streaming mode)下, SkyWalking 提供了 OAL 来分析流入的数据.")]),e._v(" "),n("p",[e._v("OAL 聚焦于服务, 服务实例以及端点的度量指标, 因此 OAL 非常易于学习和使用.")]),e._v(" "),n("p",[e._v("6.3版本以后, OAL引擎嵌入在OAP服务器运行时中，称为“OAL -rt”(OAL运行时)。\nOAL脚本现在位于' /config '文件夹，用户可以简单地改变和重新启动服务器，使其有效。\n但是，OAL脚本仍然是编译语言，OAL运行时动态生成java代码。\n您可以在system env上打开set ' SW_OAL_ENGINE_DEBUG=Y '，查看生成了哪些类。")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._m(4),e._v(" "),n("p",[e._v("分析对象包括所有、服务、服务实例、端点、服务关系、服务实例关系、端点关系`.\n当然还有一些二级域, 他们都属于以上某个一级域.")]),e._v(" "),n("p",[e._v("阅读 "),n("router-link",{attrs:{to:"./scope-definitions.html"}},[e._v("Scope Definitions")]),e._v(", 你可以在该文中找到所有域和字段定义.")],1),e._v(" "),e._m(5),e._v(" "),n("p",[e._v("使用在使用过滤器的时候, 通过指定字段名或表达式来构建字段值的过滤条件.")]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),n("p",[e._v("默认的聚合函数有 SkyWalking OAP 核心实现, 并可自由扩展更多函数.")]),e._v(" "),n("p",[e._v("提供的函数")]),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("ul",[n("li",[n("code",[e._v("histogram")]),e._v(". Read "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Heat_map",target:"_blank",rel:"noopener noreferrer"}},[e._v("Heatmap in WIKI"),n("OutboundLink")],1)])]),e._v(" "),e._m(16),e._v(" "),n("ul",[n("li",[n("code",[e._v("apdex")]),e._v(". Read "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Apdex",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apdex in WIKI"),n("OutboundLink")],1)])]),e._v(" "),e._m(17),e._v(" "),n("ul",[n("li",[n("code",[e._v("p99")]),e._v(", "),n("code",[e._v("p95")]),e._v(", "),n("code",[e._v("p90")]),e._v(", "),n("code",[e._v("p75")]),e._v(", "),n("code",[e._v("p50")]),e._v(". Read "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Percentile",target:"_blank",rel:"noopener noreferrer"}},[e._v("percentile in WIKI"),n("OutboundLink")],1)])]),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),n("p",[e._v("在本例中，p99为所有传入请求的值。参数是p99延迟计算的精度，如在上述情况下，120ms和124被认为是相同的。")]),e._v(" "),e._m(21),e._v(" "),n("p",[e._v("存储实现, 报警以及查询模块的度量指标名称. SkyWalking 内核支持自动类型推断.")]),e._v(" "),e._m(22),e._v(" "),n("p",[e._v("所有度量指标数据都会使用 Scope.ID 和最小时间桶(min-level time bucket) 进行分组.")]),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),n("p",[e._v("“Disable”是OAL中的高级语句，只在特定情况下使用。\n一些聚合和度量是通过核心硬代码定义的，\n这个“禁用”语句是设计用来让它们停止活动的，\n比如' segment '， ' top_n_database_statement '。\n在默认情况下，没有人是禁用的。")]),e._v(" "),e._m(25),e._v(" "),e._m(26)])}),[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"观测分析语言-observability-analysis-language-oal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观测分析语言-observability-analysis-language-oal"}},[this._v("#")]),this._v(" 观测分析语言(Observability Analysis Language, OAL)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[this._v("#")]),this._v(" 语法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("OAL 脚本文件应该以 "),t("code",[this._v(".oal")]),this._v(" 为后缀.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// Declare the metrics.\nMETRICS_NAME = from(SCOPE.(* | [FIELD][,FIELD ...]))\n[.filter(FIELD OP [INT | STRING])]\n.FUNCTION([PARAM][, PARAM ...])\n\n// Disable hard code \ndisable(METRICS_NAME);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"域-scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#域-scope"}},[this._v("#")]),this._v(" 域(Scope)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"过滤器-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过滤器-filter"}},[this._v("#")]),this._v(" 过滤器(Filter)")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("表达式可以使用 "),n("code",[e._v("and")]),e._v(", "),n("code",[e._v("or")]),e._v(" 和 "),n("code",[e._v("()")]),e._v(" 进行组合.\n操作符包含 "),n("code",[e._v("=")]),e._v(", "),n("code",[e._v("!=")]),e._v(", "),n("code",[e._v(">")]),e._v(", "),n("code",[e._v("<")]),e._v(", "),n("code",[e._v("in (v1, v2, ...")]),e._v(", "),n("code",[e._v('like "%..."')]),e._v(", 他们可以基于字段类型进行类型检测,\n如果类型不兼容会在编译/代码生成期间报错.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"聚合函数-aggregation-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数-aggregation-function"}},[this._v("#")]),this._v(" 聚合函数(Aggregation Function)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("longAvg")]),this._v(". 某个域实体所有输入的平均值. 输入字段必须是 "),t("code",[this._v("long")]),this._v(" 类型.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("instance_jvm_memory_max = from(ServiceInstanceJVMMemory.max).longAvg();\n在这个例子中, 输入是 "),t("code",[this._v("ServiceInstanceJVMMemory")]),this._v(" 域的每个请求, 平均值是基于字段 "),t("code",[this._v("max")]),this._v(" 进行求值的.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("doubleAvg")]),this._v(". 某个域实体的所有输入的平均值. 输入的字段必须是 "),t("code",[this._v("double")]),this._v(" 类型.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("instance_jvm_cpu = from(ServiceInstanceJVMCPU.usePercent).doubleAvg();\n在这个例子中, 输入是 "),t("code",[this._v("ServiceInstanceJVMCPU")]),this._v(" 域的每个请求, 平均值是基于 "),t("code",[this._v("usePercent")]),this._v(" 字段进行求值的.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("percent")]),this._v(". 对于输入中匹配指定条件的百分比数.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("endpoint_percent = from(Endpoint.*).percent(status == true);\n在这个例子中, 输入是每个端点的请求, 条件是 "),t("code",[this._v("endpoint.status == true")]),this._v(".")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("sum")]),this._v(". 某个域实体的调用总数.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Service_Calls_Sum = from(Service.*).sum();\n本例统计每个服务的调用数.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("All_heatmap = from(All.latency).histogram(100, 20);\n在这个例子中 传入请求的热力图参数描述如下\n参数(1)是计算延迟的精度，例如在上面的例子中，在101-200ms组中，113ms和193ms被认为是相同的.\n参数(2)是分组数量。在上述情况下，一共有21组数据分别为0-100ms, 101-200ms，…1901 - 2000ms, 2000ms以上.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("service_apdex = from(Service.latency).apdex(name, status);\n在本例中，该属性描述的是服务的应用性能指数评分.\n参数(1)是服务名称，该阈值可以在配置文件service-apdex-threshold.yml中定义.\nThe parameter (2) is the status of this request. The status(success/failure) effects the Apdex calculation.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("all_percentile = from(All.latency).percentile(10);")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("百分位")]),this._v("是自7.0版本引入的第一个多值度量。由于有多个值，可以通过' getMultipleLinearIntValues ' GraphQL查询进行查询。\n在本例中，所有传入请求的“p99”、“p95”、“p90”、“p75”、“p50”。参数是p99延迟计算的精度，如在上述情况下，120ms和124被认为是相同的。\n在7.0.0之前，使用' p99 '、' p95 '、' p90 '、' p75 '、' p50 '函数分别计算指标。在7.x版本仍然支持，但不推荐且不包括在正式脚本。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("All_p99 = from(All.latency).p99(10);")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"度量指标名称"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#度量指标名称"}},[this._v("#")]),this._v(" 度量指标名称")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"组-group"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组-group"}},[this._v("#")]),this._v(" 组(Group)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("在端点(Endpoint)域中, Scope.ID = Endpoint 的 ID(基于服务及其端点的唯一标志).")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"禁用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#禁用"}},[this._v("#")]),this._v(" #禁用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[this._v("#")]),this._v(" 示例")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('// 计算 Endpoint1 和 Endpoint2 的 p99 值\nEndpoint_p99 = from(Endpoint.latency).filter(name in ("Endpoint1", "Endpoint2")).summary(0.99)\n\n// 计算端点名以 `serv` 开头的端点的 p99 值\nserv_Endpoint_p99 = from(Endpoint.latency).filter(name like ("serv%")).summary(0.99)\n\n// 计算每个端点的响应平均时长\nEndpoint_avg = from(Endpoint.latency).avg()\n\n// 计算每个端点 p50, p75, p90, p95 and p99 的延迟柱状图, 每隔 50 毫秒一条柱\nEndpoint_percentile = from(Endpoint.latency).percentile(10)\n\n// 统计每个服务响应状态为 true 的百分比\nEndpoint_success = from(Endpoint.*).filter(status = "true").percent()\n\n// 统计每个服务响应码在 [200, 299] 之间的百分比\nEndpoint_200 = from(Endpoint.*).filter(responseCode like "2%").percent()\n\n// 统计每个服务响应码在 [500, 599] 之间的百分比\nEndpoint_500 = from(Endpoint.*).filter(responseCode like "5%").percent()\n\n// 统计每个服务的调用总量\nEndpointCalls = from(Endpoint.*).sum()\n\ndisable(segment);\ndisable(endpoint_relation_server_side);\ndisable(top_n_database_statement);\n')])])])}],!1,null,null,null);t.default=i.exports}}]);