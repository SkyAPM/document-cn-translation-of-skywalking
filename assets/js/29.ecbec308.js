(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{243:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"覆盖配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#覆盖配置"}},[t._v("#")]),t._v(" 覆盖配置")]),t._v(" "),s("h2",{attrs:{id:"版本支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本支持"}},[t._v("#")]),t._v(" 版本支持")]),t._v(" "),s("p",[t._v("5.0.0-beta +")]),t._v(" "),s("p",[s("em",[t._v("探针的覆盖配置从  3.2.5版本就已经支持")])]),t._v(" "),s("h2",{attrs:{id:"什么是覆盖配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是覆盖配置"}},[t._v("#")]),t._v(" 什么是覆盖配置?")]),t._v(" "),s("p",[t._v("默认情况下, SkyWalking 探针读取"),s("code",[t._v("agent.config")]),t._v(" 配置文件, 服务端读取配置文件 "),s("code",[t._v("application.yml")]),t._v(" .\n覆盖配置表示用户可以通过启动参数(-D)来覆盖这些配置文件里面的配置.")]),t._v(" "),s("h2",{attrs:{id:"配置优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置优先级"}},[t._v("#")]),t._v(" 配置优先级")]),t._v(" "),s("p",[t._v("启动参数配置(-D) > 配置文件")]),t._v(" "),s("h2",{attrs:{id:"覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#覆盖"}},[t._v("#")]),t._v(" 覆盖")]),t._v(" "),s("h3",{attrs:{id:"探针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#探针"}},[t._v("#")]),t._v(" 探针")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("skywalking.")]),t._v(" + key 的格式进行配置,覆盖配置文件中的配置.")]),t._v(" "),s("ul",[s("li",[t._v("为什么需要这个前缀?\n探针和目标应用共享系统启动参数(环境)的配置,使用这个前缀可以避免变量冲突.")])]),t._v(" "),s("h3",{attrs:{id:"collector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collector"}},[t._v("#")]),t._v(" Collector")]),t._v(" "),s("p",[t._v("使用配置文件中相同的 key ,在启动参数中覆盖"),s("code",[t._v("collector")]),t._v("中的配置.\n例如:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("application.yml")]),t._v("的配置:")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("agent_gRPC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gRPC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11800")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在启动脚本中使用如下启动参数配置将端口设置为31200.")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-Dagent_gRPC.gRPC.port=31200\n")])])])])}],!1,null,null,null);a.default=r.exports}}]);